{
  "name": "sweetalert2",
  "version": "6.5.6",
  "repository": {
    "type": "git",
    "url": "git://github.com/limonte/sweetalert2"
  },
  "homepage": "https://limonte.github.io/sweetalert2/",
  "description": "An awesome and accessible (WAI-ARIA) replacement for JavaScript's popup boxes, supported fork of sweetalert",
  "main": "dist/sweetalert2.js",
  "jsnext:main": "src/sweetalert2.js",
  "types": "sweetalert2.d.ts",
  "dependencies": {
    "es6-promise": "^4.0.5"
  },
  "devDependencies": {
    "babel-plugin-external-helpers": "latest",
    "babel-plugin-transform-object-assign": "latest",
    "babel-preset-es2015": "latest",
    "gulp": "latest",
    "gulp-autoprefixer": "latest",
    "gulp-clean-css": "latest",
    "gulp-rename": "latest",
    "gulp-rollup": "latest",
    "gulp-sass": "latest",
    "gulp-sass-lint": "latest",
    "gulp-standard": "^8.0.0",
    "gulp-uglify": "latest",
    "rollup": "latest",
    "rollup-plugin-babel": "latest",
    "standard": "^8.0.0",
    "testem": "latest",
    "uglify-js": "latest"
  },
  "standard": {
    "ignore": [
      "dist/"
    ],
    "global": [
      "MutationObserver"
    ]
  },
  "files": [
    "dist",
    "src",
    "sweetalert2.d.ts"
  ],
  "author": {
    "name": "Limon Monte",
    "email": "limon.monte@gmail.com",
    "url": "https://limonte.github.io"
  },
  "contributors": [
    {
      "name": "Johan Fagerberg",
      "url": "https://github.com/birjolaxew"
    },
    {
      "name": "Morgan Touverey-Quilling",
      "email": "mtouverey@alembic-dev.com",
      "url": "https://github.com/toverux"
    },
    {
      "name": "Sam Turrell",
      "email": "sam@samturrell.co.uk",
      "url": "http://samturrell.co.uk"
    },
    {
      "name": "Tristan Edwards",
      "email": "tristan.edwards@me.com",
      "url": "http://tristanedwards.me"
    },
    {
      "name": "Leo Correa",
      "email": "lcorr005@gmail.com",
      "url": "https://leonardocorrea.com/"
    },
    {
      "name": "Joseph Schultz",
      "url": "https://github.com/acupajoe"
    }
  ],
  "keywords": [
    "sweetalert",
    "sweetalert2",
    "alert",
    "prompt"
  ],
  "engines": {
    "node": ">=0.10.0"
  },
  "scripts": {
    "test": "testem ci",
    "assume-dist-unchanged": "git ls-files dist | tr '\\n' ' ' | xargs git update-index --assume-unchanged",
    "no-assume-dist-unchanged": "git ls-files dist | tr '\\n' ' ' | xargs git update-index --no-assume-unchanged"
  },
  "bugs": {
    "url": "https://github.com/limonte/sweetalert2/issues"
  },
  "license": "MIT",
  "readme": "SweetAlert2\n-----------\n\n[![Build Status](https://travis-ci.org/limonte/sweetalert2.svg?branch=master)](https://travis-ci.org/limonte/sweetalert2)\n[![Version](https://img.shields.io/npm/v/sweetalert2.svg)](https://www.npmjs.com/package/sweetalert2)\n[![Downloads](https://img.shields.io/npm/dt/sweetalert2.svg)](https://www.npmjs.com/package/sweetalert2)\n[![Standard - JavaScript Style Guide](https://img.shields.io/badge/code%20style-standard-brightgreen.svg)](http://standardjs.com/)\n[![Average time to resolve an issue](http://isitmaintained.com/badge/resolution/limonte/sweetalert2.svg)](http://isitmaintained.com/project/limonte/sweetalert2 \"Average time to resolve an issue\")\n[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/sweetalert2/Lobby)\n[![PayPal Donate](https://img.shields.io/badge/donate-PayPal.me-ff69b4.svg)](https://www.paypal.me/limonte/5)\n\nAn awesome and accessible (WAI-ARIA) replacement for JavaScript's popup boxes.\n\nWhat's the difference between SweetAlert and SweetAlert2?\n---------------------------------------------------------\n\n - [Reason of creating this fork is inactivity of original SweetAlert plugin](http://stackoverflow.com/a/27842854/1331425)\n - [SweetAlert to SweetAlert2 migration guide](https://github.com/limonte/sweetalert2/wiki/Migration-from-SweetAlert-to-SweetAlert2)\n\n---\n\n[See SweetAlert2 in action!](https://limonte.github.io/sweetalert2/)\n\n<img src=\"https://raw.github.com/limonte/sweetalert2/master/assets/sweetalert2.gif\" width=\"686\">\n\n\nInstallation\n------------\n\n```bash\nnpm install --save sweetalert2\n```\n\nOr:\n\n```bash\nbower install --save sweetalert2\n```\n\nOr download from CDN: [jsdelivr.com](https://www.jsdelivr.com/projects/sweetalert2) | [cdnjs.com](https://cdnjs.com/libraries/limonte-sweetalert2)\n\n\nUsage\n-----\n\n```html\n<script src=\"bower_components/es6-promise/es6-promise.auto.min.js\"></script> <!-- for IE support -->\n\n<script src=\"bower_components/sweetalert2/dist/sweetalert2.min.js\"></script>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bower_components/sweetalert2/dist/sweetalert2.min.css\">\n```\n\nOr:\n\n```js\n// ES6 Modules or TypeScript\nimport swal from 'sweetalert2'\n\n// CommonJS\nconst swal = require('sweetalert2')\n```\n\nPlease note that TypeScript is supported, so you don't have to install a third-party declaration file.\n\n\nExamples\n--------\n\nThe most basic message:\n\n```js\nswal('Hello world!')\n```\n\nA message signaling an error:\n\n```js\nswal('Oops...', 'Something went wrong!', 'error')\n```\n\nHandling the result of SweetAlert2 modal:\n\n```js\nswal({\n  title: 'Are you sure?',\n  text: 'You will not be able to recover this imaginary file!',\n  type: 'warning',\n  showCancelButton: true,\n  confirmButtonText: 'Yes, delete it!',\n  cancelButtonText: 'No, keep it'\n}).then(function() {\n  swal(\n    'Deleted!',\n    'Your imaginary file has been deleted.',\n    'success'\n  )\n}, function(dismiss) {\n  // dismiss can be 'overlay', 'cancel', 'close', 'esc', 'timer'\n  if (dismiss === 'cancel') {\n    swal(\n      'Cancelled',\n      'Your imaginary file is safe :)',\n      'error'\n    )\n  }\n})\n```\n\n[View more examples](https://limonte.github.io/sweetalert2/)\n\n\nHandling Dismissals\n-------------------\n\nWhen an alert is dismissed by the user, the Promise returned by `swal()` will reject with a string documenting the reason it was dismissed:\n\n| String      | Description                                             | Related configuration |\n| ----------- | ------------------------------------------------------- | --------------------- |\n| `'overlay'` | The user clicked the overlay.                           | `allowOutsideClick`   |\n| `'cancel'`  | The user clicked the cancel button.                     | `showCancelButton`    |\n| `'close'`   | The user clicked the close button.                      | `showCloseButton`     |\n| `'esc'`     | The user pressed the <kbd>Esc</kbd> key.                | `allowEscapeKey`      |\n| `'timer'`   | The timer ran out, and the alert closed automatically.  | `timer`               |\n\nIf rejections are not handled, it will be logged as an error. To avoid this, add a rejection handler to the Promise. Alternatively, you can use `.catch(swal.noop)` as a quick way to simply suppress the errors:\n\n```js\nswal(...)\n  .catch(swal.noop)\n```\n\nModal Types\n-----------\n\n| `success`                                                                       | `error`                                                                       | `warning`                                                                       | `info`                                                                       | `question`                                                                       |\n| ------------------------------------------------------------------------------- | ----------------------------------------------------------------------------- | ------------------------------------------------------------------------------- | ---------------------------------------------------------------------------- | -------------------------------------------------------------------------------- |\n| ![](https://raw.github.com/limonte/sweetalert2/master/assets/swal2-success.png) | ![](https://raw.github.com/limonte/sweetalert2/master/assets/swal2-error.png) | ![](https://raw.github.com/limonte/sweetalert2/master/assets/swal2-warning.png) | ![](https://raw.github.com/limonte/sweetalert2/master/assets/swal2-info.png) | ![](https://raw.github.com/limonte/sweetalert2/master/assets/swal2-question.png) |\n\n\nConfiguration\n-------------\n\n| Argument                | Default value        | Description |\n| ----------------------- | -------------------- | ----------- |\n| `title`                 | `null`               | The title of the modal, as HTML. It can either be added to the object under the key \"title\" or passed as the first parameter of the function. |\n| `titleText`             | `null`               | The title of the modal, as text. Useful to avoid HTML injection. |\n| `text`                  | `null`               | A description for the modal. It can either be added to the object under the key \"text\" or passed as the second parameter of the function. |\n| `html`                  | `null`               | A HTML description for the modal. If `text` and `html` parameters are provided in the same time, \"text\" will be used. |\n| `type`                  | `null`               | The type of the modal. SweetAlert2 comes with [5 built-in types](#modal-types) which will show a corresponding icon animation: `warning`, `error`, `success`, `info` and `question`. It can either be put in the array under the key `type` or passed as the third parameter of the function. |\n| `target`                | `'body'`             | The container element for adding modal into. |\n| `input`                 | `null`               | Input field type, can be `'text'`, `'email'`, `'password'`, `'number'`, `'tel'`, `'range'`, `'textarea'`, `'select'`, `'radio'`, `'checkbox'`, `'file'` and `'url'`. |\n| `width`                 | `'500px'`            | Modal window width, including paddings (`box-sizing: border-box`). Can be in `px` or `%`. |\n| `padding`               | `20`                 | Modal window padding. |\n| `background`            | `'#fff'`             | Modal window background (CSS `background` property). |\n| `customClass`           | `null`               | A custom CSS class for the modal. |\n| `timer`                 | `null`               | Auto close timer of the modal. Set in ms (milliseconds). |\n| `animation`             | `true`               | If set to `false`, modal CSS animation will be disabled. |\n| `allowOutsideClick`     | `true`               | If set to `false`, the user can't dismiss the modal by clicking outside it. |\n| `allowEscapeKey`        | `true`               | If set to `false`, the user can't dismiss the modal by pressing the <kbd>Esc</kbd> key. |\n| `allowEnterKey`         | `true`               | If set to `false`, the user can't confirm the modal by pressing the <kbd>Enter</kbd> or <kbd>Space</kbd> keys, unless they manually focus the confirm button. |\n| `showConfirmButton`     | `true`               | If set to `false`, a \"Confirm\"-button will not be shown. It can be useful when you're using `html` parameter for custom HTML description. |\n| `showCancelButton`      | `false`              | If set to `true`, a \"Cancel\"-button will be shown, which the user can click on to dismiss the modal. |\n| `confirmButtonText`     | `'OK'`               | Use this to change the text on the \"Confirm\"-button. |\n| `cancelButtonText`      | `'Cancel'`           | Use this to change the text on the \"Cancel\"-button. |\n| `confirmButtonColor`    | `'#3085d6'`          | Use this to change the background color of the \"Confirm\"-button (must be a HEX value). |\n| `cancelButtonColor`     | `'#aaa'`             | Use this to change the background color of the \"Cancel\"-button (must be a HEX value). |\n| `confirmButtonClass`    | `null`               | A custom CSS class for the \"Confirm\"-button. |\n| `cancelButtonClass`     | `null`               | A custom CSS class for the \"Cancel\"-button. |\n| `buttonsStyling`        | `true`               | Apply default styling to buttons. If you want to use your own classes (e.g. Bootstrap classes) set this parameter to `false`. |\n| `reverseButtons`        | `false`              | Set to `true` if you want to invert default buttons positions (\"Confirm\"-button on the right side). |\n| `focusCancel`           | `false`              | Set to `true` if you want to focus the \"Cancel\"-button by default. |\n| `showCloseButton`       | `false`              | Set to `true` to show close button in top right corner of the modal. |\n| `showLoaderOnConfirm`   | `false`              | Set to `true` to disable buttons and show that something is loading. Useful for AJAX requests. |\n| `preConfirm`            | `null`               | Function to execute before confirm, should return Promise, see <a href=\"https://limonte.github.io/sweetalert2/#ajax-request\">usage example</a>. |\n| `imageUrl`              | `null`               | Add an image for the modal. Should contain a string with the path or URL to the image. |\n| `imageWidth`            | `null`               | If imageUrl is set, you can specify imageWidth to describes image width in px. |\n| `imageHeight`           | `null`               | Custom image height in px. |\n| `imageClass`            | `null`               | A custom CSS class for the image. |\n| `inputPlaceholder`      | `''`                 | Input field placeholder. |\n| `inputValue`            | `''`                 | Input field initial value. |\n| `inputOptions`          | `{}` or `Promise`    | If `input` parameter is set to `'select'` or `'radio'`, you can provide options. Object keys will represent options values, object values will represent options text values. |\n| `inputAutoTrim`         | `true`               | Automatically remove whitespaces from both ends of a result string. Set this parameter to `false` to disable auto-trimming. |\n| `inputAttributes`       | `null`               | HTML input attributes (e.g. `'min'`, `'max'`, `'step'`, `'accept'` ...), that are added to the input field. |\n| `inputValidator`        | `null`               | Validator for input field, should return Promise, see <a href=\"https://limonte.github.io/sweetalert2/#select-box\">usage example</a>. |\n| `inputClass`            | `null`               | A custom CSS class for the input field. |\n| `progressSteps`         | `[]`                 | Progress steps, useful for modal queues, see <a href=\"https://limonte.github.io/sweetalert2/#chaining-modals\">usage example</a>. |\n| `currentProgressStep`   | `null`               | Current active progress step. The default is `swal.getQueueStep()`. |\n| `progressStepsDistance` | `'40px'`             | Distance between progress steps. |\n| `onOpen`                | `null`               | Function to run when modal opens, provides modal DOM element as the first argument. |\n| `onClose`               | `null`               | Function to run when modal closes, provides modal DOM element as the first argument. |\n\nYou can redefine default params by using `swal.setDefaults(customParams)` where `customParams` is an object.\n\n\nMethods\n-------\n\n| Method                                          | Description |\n| ----------------------------------------------- | ----------- |\n| `swal.isVisible()`                              | Determine if modal is shown. |\n| `swal.setDefaults({Object})`                    | If you end up using a lot of the same settings when calling SweetAlert2, you can use setDefaults at the start of your program to set them once and for all! |\n| `swal.resetDefaults()`                          | Resets settings to their default value. |\n| `swal.close()` or `swal.closeModal()`           | Close the currently open SweetAlert2 modal programmatically. |\n| `swal.getTitle()`                               | Get the modal title. |\n| `swal.getContent()`                             | Get the modal content. |\n| `swal.getImage()`                               | Get the image. |\n| `swal.getConfirmButton()`                       | Get the \"Confirm\" button. |\n| `swal.getCancelButton()`                        | Get the \"Cancel\" button. |\n| `swal.enableButtons()`                          | Enable \"Confirm\" and \"Cancel\" buttons. |\n| `swal.disableButtons()`                         | Disable \"Confirm\" and \"Cancel\" buttons. |\n| `swal.enableConfirmButton()`                    | Enable the \"Confirm\"-button only. |\n| `swal.disableConfirmButton()`                   | Disable the \"Confirm\"-button only. |\n| `swal.enableLoading()` or `swal.showLoading()`  | Disable buttons and show loader. This is useful with AJAX requests. |\n| `swal.disableLoading()` or `swal.hideLoading()` | Enable buttons and hide loader. |\n| `swal.clickConfirm()`                           | Click the \"Confirm\"-button programmatically. |\n| `swal.clickCancel()`                            | Click the \"Cancel\"-button programmatically. |\n| `swal.showValidationError(error)`               | Show validation error message. |\n| `swal.resetValidationError()`                   | Hide validation error message. |\n| `swal.getInput()`                               | Get the input DOM node, this method works with `input` parameter. |\n| `swal.disableInput()`                           | Disable input. A disabled input element is unusable and un-clickable. |\n| `swal.enableInput()`                            | Enable input. |\n| `swal.queue([Array])`                           | Provide array of SweetAlert2 parameters to show multiple modals, one modal after another or a function that returns alert parameters given modal number. See [usage example](https://limonte.github.io/sweetalert2/#chaining-modals).  |\n| `swal.getQueueStep()`                           | Get the index of current modal in queue. When there's no active queue, `null` will be returned. |\n| `swal.insertQueueStep()`                        | Insert a modal to queue, you can specify modal positioning with second parameter. By default a modal will be added to the end of a queue. |\n| `swal.deleteQueueStep(index)`                   | Delete a modal at `index` from queue. |\n| `swal.getProgressSteps()`                       | Progress steps getter. |\n| `swal.setProgressSteps([])`                     | Progress steps setter. |\n| `swal.showProgressSteps()`                      | Show progress steps. |\n| `swal.hideProgressSteps()`                      | Hide progress steps. |\n\n\nBrowser compatibility\n---------------------\n\nSweetAlert2 works in most major browsers (yes, even IE). Some details:\n\n- **IE: 11**, Promise polyfill should be included (see [usage example](#usage)).\n- **Microsoft Edge: 12+**\n- **Safari: 4+**\n- **Firefox: 4+**\n- **Chrome 14+**\n- **Opera: 15+**\n\nNote that SweetAlert2 **does not** and **will not** provide support or functionality of any kind on IE10 and lower.\n\n\nContributing\n------------\n\nIf you would like to contribute enhancements or fixes, please do the following:\n\n1. Fork the `sweetalert2` repository and clone it locally.\n\n2. Make sure you have [npm](https://www.npmjs.com/) or [yarn](https://yarnpkg.com/) installed.\n\n3. When in the SweetAlert2 directory, run `npm install` or `yarn install` to install dependencies.\n\n4. Start gulp watcher `gulp watch` to automatically build and minify the SCSS and JS-files.\n\n5. Check that your code is compliant with code linters: `gulp lint`.\n\n6. Ensure that you didn't break any of tests: `npm test`.\n\n7. Make sure that `dist/*` files aren't committed and create a pull request.\n\n\nRelated projects\n----------------\n\n- [toverux/ngsweetalert2](https://github.com/toverux/ngsweetalert2) - SweetAlert2 directive for Angular 2+\n- [limonte/sweetalert2-webpack-demo](https://github.com/limonte/sweetalert2-webpack-demo) - SweetAlert2 + webpack demo\n\n\nDonations\n---------\n\nIf you liked this plugin, you can donate to support it:\n\n- https://www.paypal.me/limonte/5\n",
  "readmeFilename": "README.md",
  "_id": "sweetalert2@6.5.6",
  "dist": {
    "shasum": "81986c5bfe7e52df8b579f33213f0b2e907741fc"
  },
  "_from": "sweetalert2@",
  "_resolved": "https://registry.npmjs.org/sweetalert2/-/sweetalert2-6.5.6.tgz"
}
